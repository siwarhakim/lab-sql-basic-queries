-- Lab | SQL Data Aggregation and Transformation

USE sakila;

-- 1

SELECT c.name AS category, COUNT(film_id) AS num_films
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2 Retrieve the store ID, city, and country for each store.
SELECT * FROM sakila.city;
SELECT * FROM sakila.country;
SELECT * FROM sakila.staff;

SELECT s.store_id, a.city_id, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.
SELECT c.store_id, SUM(a.amount) AS total_revenue
FROM customer c
JOIN payment a ON c.customer_id= a.customer_id
GROUP BY c.store_id;
;

-- 4 Determine the average running time of films for each category.

SELECT * FROM sakila.category;
SELECT * FROM sakila.film;
SELECT * FROM sakila.film_category;

SELECT c.name AS category, AVG(b.length) AS average_running_time 
FROM category c
JOIN film_category a ON c.category_id= a.category_id
JOIN film b ON b.film_id= a.film_id
GROUP BY c.name
ORDER BY AVG(length) ASC
;


-- Bonus
-- 5 
SELECT c.name AS category, AVG(b.length) AS average_running_time 
FROM category c
JOIN film_category a ON c.category_id= a.category_id
JOIN film b ON b.film_id= a.film_id
GROUP BY c.name
ORDER BY AVG(length) DESC
LIMIT 5
;

-- 6

SELECT TITLE, COUNT(r.rental_id) AS rental_num
FROM film f
JOIN inventory b ON b.film_id= f.film_id
JOIN rental r ON r.inventory_id = b.inventory_id 
GROUP BY f.title
ORDER BY COUNT(r.rental_id) DESC
LIMIT 10
;

-- 7

SELECT 
CASE 
WHEN COUNT(*) > 0 
THEN 'Available' 
ELSE 'NOT available' 
END AS availability
FROM inventory s
JOIN film f ON f.film_id= s.film_id
WHERE f.title ="Academy Dinosaur" AND s.store_id = 1;


SELECT f.title AS film_title,
       CASE WHEN COUNT(i.inventory_id) > 0 THEN 'Available' ELSE 'NOT available' END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title;

